@mixin make-col-modifier($type, $size, $columns) {
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

.row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: - $gutter / 2;
  margin-left: - $gutter / 2;
  @include clearfix();

  &.reverse {
    flex-direction: row-reverse;
  }
}

%grid-column {
  box-sizing: border-box;
  position: relative;
  min-height: 1px;
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);
  width: 100%;
}

$breakpoint-counter: 0;
@each $breakpoint in map-keys($breakpoints) {
  $breakpoint-counter: ($breakpoint-counter + 1);

  @for $i from 1 through $columns {
    .col-#{$breakpoint}-#{$i} {
      @extend %grid-column;
    }
  }

  @for $i from 1 through $columns {
    .col-#{$breakpoint}-#{$i} {
      flex: 0 0 percentage($i / $columns);
      max-width: percentage($i / $columns);
    }
  }

  @each $modifier in (pull, push) {
    @for $i from 0 through $columns {
      .col-#{$breakpoint}-#{$modifier}-#{$i} {
        @include make-col-modifier($modifier, $i, $columns)
      }
    }
  }

  @for $i from 0 through ($columns - 1) {
    @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .offset-xs-0
      .col-#{$breakpoint}-offset-#{$i} {
        @include make-col-modifier(offset, $i, $columns)
      }
    }
  }

}
